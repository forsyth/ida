//go:build ignore
// Mkidatab generates the inverse table for division in Zp for p=Prime, for use by ida.go's div function.
// It is run by go generate.
package main

import (
	"bufio"
	"flag"
	"fmt"
	"math/big"
	"os"
)

var prefix = `// Coded generated by mkidatab; DO NOT EDIT

package ida

var invtab = []Field{
`

var suffix = `}
`

func main() {
	ofile := flag.String("output", "", "output file name")
	prime := flag.Int64("prime", 65537, "field order")
	flag.Parse()
	order := *prime
	switch {
	case order < 1:
		fmt.Fprintf(os.Stderr, "mkidatab: implausible order: %d\n", order)
		os.Exit(1)
	case !big.NewInt(order).ProbablyPrime(2):
		fmt.Fprintf(os.Stderr, "mkidatab: order not prime: %d\n", order)
		os.Exit(1)
	}
	var outfile *os.File
	var err error
	if *ofile != "" {
		outfile, err = os.Create(*ofile)
		if err != nil {
			fmt.Fprintf(os.Stderr, "mkidatab: %s: %v\n", *ofile, err)
			os.Exit(1)
		}
	} else {
		outfile = os.Stdout
	}
	out := bufio.NewWriter(outfile)
	defer out.Flush()
	f := big.NewInt(order)
	fm2 := new(big.Int).Sub(f, big.NewInt(2))
	fmt.Fprint(out, prefix)
	fmt.Fprintf(out, "\t0,\n")
	for i := int64(1); i <= order; i++ {
		y := new(big.Int).Exp(big.NewInt(i), fm2, f)
		fmt.Fprintf(out, "\t%d,\n", y.Int64())
	}
	fmt.Fprint(out, suffix)
}
